{"version":3,"sources":["components/Frase.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorFrase","styled","div","Frase","frase","Object","keys","length","quote","author","Contenedor","Boton","button","App","useState","guardarFrase","useEffect","consultarAPI","a","fetch","api","json","console","log","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ivCAGA,IAAMA,EAAkBC,IAAOC,IAAV,KA8CNC,EAXD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZ,OAAiC,IAA9BC,OAAOC,KAAKF,GAAOG,OAAqB,KAEvC,kBAACP,EAAD,KACI,4BAAKI,EAAMI,OACX,gCAAMJ,EAAMK,U,qmBCvCxB,IAAMC,EAAaT,IAAOC,IAAV,KAOVS,EAAQV,IAAOW,OAAV,KAkDIC,MAjCd,WAAe,MAGoBC,mBAAS,IAH7B,mBAGJV,EAHI,KAGGW,EAHH,KAMZC,qBAAW,WACTC,MACC,IAEH,IAAMA,EAAY,uCAAG,8BAAAC,EAAA,sEACHC,MAAM,uDADH,cACfC,EADe,gBAEDA,EAAIC,OAFH,OAEfjB,EAFe,OAGrBW,EAAaX,EAAM,IACnBkB,QAAQC,IAAInB,EAAM,IAJG,2CAAH,qDAOpB,OACE,kBAACM,EAAD,KACE,kBAAC,EAAD,CACEN,MAAOA,IAET,kBAACO,EAAD,CAGEa,QAAS,kBAAMP,MAHjB,mBCtCcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.84069576.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ContenedorFrase = styled.div`\r\n    padding: 3rem;\r\n    border-radius: .5rem;\r\n    background-color: #fff;\r\n    max-width: 800px;\r\n    @media (min-width: 992px) {\r\n        margin-top: 10rem;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Arial, Helvetica, sans-serif, Arial, Helvetica, sans-serif, sans-serif;\r\n        text-align: center;\r\n        position: relative;\r\n        padding-left: 4rem;\r\n\r\n        &::before {\r\n            content: open-quote;\r\n            font-size: 10rem;\r\n            color: black;\r\n            position: absolute;\r\n            left: -1rem;\r\n            top: -2rem;\r\n        }\r\n    }\r\n\r\n    p {\r\n        font-family: Verdana, Geneva, Tahoma, sans-serif, Verdana, Geneva, Tahoma, sans-serif, Verdana, Geneva, Tahoma, sans-serif, sans-serif;\r\n        font-size: 1.4rem;\r\n        font-weight: bold;\r\n        text-align: right;\r\n        color: #666;\r\n        margin-top: 2rem;\r\n    }\r\n`;\r\n\r\nconst Frase = ({frase}) => {\r\n    if(Object.keys(frase).length === 0) return null;\r\n    return (\r\n        <ContenedorFrase>\r\n            <h1>{frase.quote}</h1>\r\n            <p>- {frase.author}</p>\r\n        </ContenedorFrase>\r\n    )\r\n\r\n}\r\n \r\nexport default Frase;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Frase from './components/Frase';\n\nconst Contenedor = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 5rem;\n  flex-direction: column;\n`;\n\nconst Boton = styled.button`\n  background: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\n  background-size: 300px;\n  font-family: Arial, Helvetica, sans-serif;\n  color: #fff;\n  margin-top: 3rem;\n  padding: 1rem 3rem;\n  font-size: 2rem;\n  border: 2px solid black;\n  transition: backgroud-size .8s ease;\n\n  :hover {\n    cursor: pointer;\n    background-size: 400px;\n  }\n`;\n\n function App() {\n\n    // state de frases\n    const [ frase, guardarFrase ] = useState({});\n\n    // Cargar UNA FRASE\n    useEffect( ()=> {\n      consultarAPI();\n    }, []);\n\n    const consultarAPI = async () => {\n    const api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\n    const frase = await api.json();\n    guardarFrase(frase[0]);\n    console.log(frase[0]);\n }\n\n  return (\n    <Contenedor>\n      <Frase \n        frase={frase}\n      />\n      <Boton\n        // consultarAPI\n        // () => consultarAPI()\n        onClick={() => consultarAPI()}\n      >\n        Obtener Frase\n      </Boton>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}